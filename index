<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ERP Malanguísimas - Sistema Contable</title>
    
    <!-- Firebase SDK -->
    <script src="https://www.gstatic.com/firebasejs/10.8.0/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/10.8.0/firebase-firestore-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/10.8.0/firebase-analytics-compat.js"></script>
    
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    
    <!-- Chart.js para reportes -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/4.4.1/chart.umd.js"></script>
    
    <!-- FontAwesome para iconos -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    
    <style>
        .sidebar-menu { transition: transform 0.3s ease; }
        .sidebar-closed { transform: translateX(-100%); }
        @media (min-width: 768px) { .sidebar-closed { transform: translateX(0); } }
        .fade-in { animation: fadeIn 0.3s ease-in; }
        @keyframes fadeIn { from { opacity: 0; } to { opacity: 1; } }
        .glass-effect { backdrop-filter: blur(10px); background: rgba(255,255,255,0.9); }
        .hover-scale { transition: transform 0.2s; }
        .hover-scale:hover { transform: scale(1.02); }
        @media print {
            .no-print { display: none !important; }
            .print-only { display: block !important; }
        }
        .loader {
            border: 3px solid #f3f3f3;
            border-top: 3px solid #f97316;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .offline-indicator {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background: #ef4444;
            color: white;
            padding: 10px 20px;
            border-radius: 8px;
            display: none;
            z-index: 1000;
        }
        body.offline .offline-indicator {
            display: block;
        }
        
        /* Error message styles */
        .error-message {
            position: fixed;
            top: 20px;
            right: 20px;
            background: #ef4444;
            color: white;
            padding: 15px 20px;
            border-radius: 8px;
            max-width: 400px;
            z-index: 1000;
            display: none;
        }
        
        /* Warning message for demo mode */
        .demo-warning {
            background: #f59e0b;
            color: white;
            padding: 10px;
            text-align: center;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            z-index: 1000;
        }
    </style>
</head>
<body class="bg-gray-50">
    <!-- Mensaje de advertencia para modo demo -->
    <div id="demoWarning" class="demo-warning hidden">
        <i class="fas fa-exclamation-triangle mr-2"></i>
        Modo Demo - Los datos no se guardarán permanentemente
    </div>

    <!-- Mensaje de error -->
    <div id="errorMessage" class="error-message">
        <div class="flex justify-between items-start">
            <div id="errorText"></div>
            <button onclick="hideError()" class="ml-4 text-white hover:text-gray-200">
                <i class="fas fa-times"></i>
            </button>
        </div>
    </div>

    <!-- Indicador de conexión offline -->
    <div class="offline-indicator">
        <i class="fas fa-wifi-slash mr-2"></i>Sin conexión
    </div>

    <!-- Loader Global -->
    <div id="globalLoader" class="hidden fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
        <div class="bg-white p-6 rounded-lg shadow-xl flex flex-col items-center">
            <div class="loader mb-4"></div>
            <p class="text-gray-600">Procesando...</p>
        </div>
    </div>

    <!-- Contenedor Principal -->
    <div id="app" class="min-h-screen">
        <!-- Dashboard Principal -->
        <div id="mainDashboard">
            <!-- Barra de Navegación Superior -->
            <nav class="bg-white shadow-lg fixed w-full top-0 z-40 no-print" style="margin-top: 0;">
                <div class="px-4 py-3 flex justify-between items-center">
                    <div class="flex items-center space-x-4">
                        <button onclick="toggleSidebar()" class="md:hidden text-gray-600 hover:text-gray-800">
                            <i class="fas fa-bars text-xl"></i>
                        </button>
                        <div class="flex items-center space-x-2">
                            <i class="fas fa-fire text-2xl text-orange-500"></i>
                            <h1 class="text-xl font-bold text-gray-800 hidden sm:block">Malanguísimas ERP</h1>
                        </div>
                    </div>
                    <div class="flex items-center gap-2">
                        <button id="modoDemoBtn" onclick="activarModoDemo()" class="hidden bg-amber-500 text-white px-3 py-2 rounded-lg hover:bg-amber-600 transition text-sm">
                            <i class="fas fa-play mr-1"></i>Modo Demo
                        </button>
                        <button onclick="syncData()" class="bg-gray-500 text-white px-3 py-2 rounded-lg hover:bg-gray-600 transition text-sm">
                            <i class="fas fa-sync mr-1"></i>Sincronizar
                        </button>
                    </div>
                </div>
            </nav>

            <!-- Contenedor con Sidebar y Contenido -->
            <div class="flex pt-16">
                <!-- Sidebar -->
                <aside id="sidebar" class="sidebar-menu fixed md:static w-64 h-screen bg-gray-800 text-white overflow-y-auto no-print z-30">
                    <div class="p-4">
                        <ul class="space-y-2">
                            <li>
                                <button onclick="showSection('dashboard')" class="menu-item w-full text-left px-4 py-3 rounded-lg hover:bg-gray-700 transition bg-gray-700">
                                    <i class="fas fa-tachometer-alt mr-3"></i>Dashboard
                                </button>
                            </li>
                            <li>
                                <button onclick="showSection('productos')" class="menu-item w-full text-left px-4 py-3 rounded-lg hover:bg-gray-700 transition">
                                    <i class="fas fa-box mr-3"></i>Productos
                                </button>
                            </li>
                            <li>
                                <button onclick="showSection('ventas')" class="menu-item w-full text-left px-4 py-3 rounded-lg hover:bg-gray-700 transition">
                                    <i class="fas fa-shopping-cart mr-3"></i>Ventas
                                </button>
                            </li>
                            <li>
                                <button onclick="showSection('compras')" class="menu-item w-full text-left px-4 py-3 rounded-lg hover:bg-gray-700 transition">
                                    <i class="fas fa-truck mr-3"></i>Compras
                                </button>
                            </li>
                            <li>
                                <button onclick="showSection('contabilidad')" class="menu-item w-full text-left px-4 py-3 rounded-lg hover:bg-gray-700 transition">
                                    <i class="fas fa-calculator mr-3"></i>Contabilidad
                                </button>
                            </li>
                            <li>
                                <button onclick="showSection('reportes')" class="menu-item w-full text-left px-4 py-3 rounded-lg hover:bg-gray-700 transition">
                                    <i class="fas fa-chart-bar mr-3"></i>Reportes
                                </button>
                            </li>
                            <li>
                                <button onclick="showSection('configuracion')" class="menu-item w-full text-left px-4 py-3 rounded-lg hover:bg-gray-700 transition">
                                    <i class="fas fa-cog mr-3"></i>Configuración
                                </button>
                            </li>
                        </ul>
                    </div>
                </aside>

                <!-- Overlay para móvil -->
                <div id="sidebarOverlay" class="fixed inset-0 bg-black bg-opacity-50 z-20 hidden md:hidden" onclick="toggleSidebar()"></div>

                <!-- Contenido Principal -->
                <main class="flex-1 p-4 md:p-6 overflow-y-auto">
                    <!-- Dashboard -->
                    <section id="dashboard" class="content-section fade-in">
                        <h2 class="text-2xl font-bold text-gray-800 mb-6">Dashboard Principal</h2>
                        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-8">
                            <div class="bg-white p-6 rounded-xl shadow-lg hover-scale">
                                <div class="flex items-center justify-between">
                                    <div>
                                        <p class="text-gray-600 text-sm">Ventas del Mes</p>
                                        <p class="text-2xl font-bold text-gray-800" id="ventasMes">$0.00</p>
                                    </div>
                                    <i class="fas fa-chart-line text-3xl text-green-500"></i>
                                </div>
                            </div>
                            <div class="bg-white p-6 rounded-xl shadow-lg hover-scale">
                                <div class="flex items-center justify-between">
                                    <div>
                                        <p class="text-gray-600 text-sm">Productos en Stock</p>
                                        <p class="text-2xl font-bold text-gray-800" id="totalStock">0</p>
                                    </div>
                                    <i class="fas fa-box text-3xl text-blue-500"></i>
                                </div>
                            </div>
                            <div class="bg-white p-6 rounded-xl shadow-lg hover-scale">
                                <div class="flex items-center justify-between">
                                    <div>
                                        <p class="text-gray-600 text-sm">Clientes Activos</p>
                                        <p class="text-2xl font-bold text-gray-800" id="clientesActivos">0</p>
                                    </div>
                                    <i class="fas fa-users text-3xl text-purple-500"></i>
                                </div>
                            </div>
                            <div class="bg-white p-6 rounded-xl shadow-lg hover-scale">
                                <div class="flex items-center justify-between">
                                    <div>
                                        <p class="text-gray-600 text-sm">Utilidad Neta</p>
                                        <p class="text-2xl font-bold text-gray-800" id="utilidadNeta">$0.00</p>
                                    </div>
                                    <i class="fas fa-dollar-sign text-3xl text-orange-500"></i>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Gráficos -->
                        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                            <div class="bg-white p-6 rounded-xl shadow-lg">
                                <h3 class="text-lg font-semibold text-gray-800 mb-4">Ventas por Sabor</h3>
                                <div class="relative h-64">
                                    <canvas id="salesChart"></canvas>
                                </div>
                            </div>
                            <div class="bg-white p-6 rounded-xl shadow-lg">
                                <h3 class="text-lg font-semibold text-gray-800 mb-4">Tendencia de Ventas</h3>
                                <div class="relative h-64">
                                    <canvas id="trendChart"></canvas>
                                </div>
                            </div>
                        </div>
                    </section>

                    <!-- Sección de Productos -->
                    <section id="productos" class="content-section hidden fade-in">
                        <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 gap-4">
                            <h2 class="text-2xl font-bold text-gray-800">Gestión de Productos</h2>
                            <button onclick="showProductForm()" class="bg-orange-500 text-white px-4 py-2 rounded-lg hover:bg-orange-600 transition">
                                <i class="fas fa-plus mr-2"></i>Nuevo Producto
                            </button>
                        </div>
                        
                        <!-- Formulario de Producto -->
                        <div id="productForm" class="hidden bg-white p-6 rounded-xl shadow-lg mb-6">
                            <h3 class="text-lg font-semibold text-gray-800 mb-4">Agregar/Editar Producto</h3>
                            <form id="productFormElement" class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <input type="hidden" id="productId">
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-1">Nombre del Producto</label>
                                    <input type="text" id="productName" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500" required>
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-1">Categoría</label>
                                    <select id="productCategory" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500">
                                        <option value="chips">Chips de Malanga</option>
                                        <option value="otros">Otros Productos</option>
                                    </select>
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-1">Tamaño</label>
                                    <select id="productSize" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500">
                                        <option value="50g">50 gramos</option>
                                        <option value="100g">100 gramos</option>
                                        <option value="otro">Otro</option>
                                    </select>
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-1">Sabor</label>
                                    <select id="productFlavor" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500">
                                        <option value="fuego">Fuego</option>
                                        <option value="habanero">Habanero</option>
                                        <option value="jalapeño">Jalapeño</option>
                                        <option value="misterio">Misterio</option>
                                        <option value="adobadas">Adobadas</option>
                                        <option value="naturales">Naturales</option>
                                        <option value="especias">Especias</option>
                                        <option value="chipotle">Chipotle</option>
                                        <option value="na">No Aplica</option>
                                    </select>
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-1">Precio Mayoreo</label>
                                    <input type="number" id="wholesalePrice" step="0.01" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500" required>
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-1">Precio Menudeo</label>
                                    <input type="number" id="retailPrice" step="0.01" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500" required>
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-1">Stock Inicial</label>
                                    <input type="number" id="initialStock" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500" required>
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-1">Código de Barras</label>
                                    <input type="text" id="barcode" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500">
                                </div>
                                <div class="md:col-span-2 flex gap-2">
                                    <button type="submit" class="bg-green-500 text-white px-6 py-2 rounded-lg hover:bg-green-600 transition">
                                        <i class="fas fa-save mr-2"></i>Guardar
                                    </button>
                                    <button type="button" onclick="hideProductForm()" class="bg-gray-500 text-white px-6 py-2 rounded-lg hover:bg-gray-600 transition">
                                        Cancelar
                                    </button>
                                </div>
                            </form>
                        </div>

                        <!-- Lista de Productos -->
                        <div class="bg-white rounded-xl shadow-lg overflow-hidden">
                            <div class="overflow-x-auto">
                                <table class="min-w-full">
                                    <thead class="bg-gray-50">
                                        <tr>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Producto</th>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Tamaño</th>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Sabor</th>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Stock</th>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">P. Mayoreo</th>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">P. Menudeo</th>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Acciones</th>
                                        </tr>
                                    </thead>
                                    <tbody id="productsList" class="bg-white divide-y divide-gray-200">
                                        <!-- Los productos se cargarán aquí dinámicamente -->
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </section>

                    <!-- Sección de Ventas -->
                    <section id="ventas" class="content-section hidden fade-in">
                        <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 gap-4">
                            <h2 class="text-2xl font-bold text-gray-800">Registro de Ventas</h2>
                            <button onclick="showSaleForm()" class="bg-orange-500 text-white px-4 py-2 rounded-lg hover:bg-orange-600 transition">
                                <i class="fas fa-plus mr-2"></i>Nueva Venta
                            </button>
                        </div>

                        <!-- Formulario de Venta -->
                        <div id="saleForm" class="hidden bg-white p-6 rounded-xl shadow-lg mb-6">
                            <h3 class="text-lg font-semibold text-gray-800 mb-4">Registrar Venta</h3>
                            <form id="saleFormElement" class="space-y-4">
                                <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-1">Cliente</label>
                                        <input type="text" id="customerName" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500" required>
                                    </div>
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-1">Tipo de Cliente</label>
                                        <select id="customerType" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500" onchange="updateAllPrices()">
                                            <option value="menudeo">Menudeo</option>
                                            <option value="mayoreo">Mayoreo</option>
                                        </select>
                                    </div>
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-1">Fecha</label>
                                        <input type="date" id="saleDate" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500" required>
                                    </div>
                                </div>

                                <!-- Líneas de Venta -->
                                <div class="border rounded-lg p-4">
                                    <h4 class="font-semibold text-gray-700 mb-3">Productos</h4>
                                    <div id="saleLines" class="space-y-2">
                                        <!-- Las líneas se agregarán dinámicamente -->
                                    </div>
                                    <button type="button" onclick="addSaleLine()" class="mt-3 text-orange-600 hover:text-orange-700">
                                        <i class="fas fa-plus mr-1"></i>Agregar Producto
                                    </button>
                                </div>

                                <div class="flex justify-between items-center pt-4 border-t">
                                    <div class="text-xl font-bold">
                                        Total: $<span id="saleTotal">0.00</span>
                                    </div>
                                    <div class="flex gap-2">
                                        <button type="submit" class="bg-green-500 text-white px-6 py-2 rounded-lg hover:bg-green-600 transition">
                                            <i class="fas fa-check mr-2"></i>Registrar Venta
                                        </button>
                                        <button type="button" onclick="hideSaleForm()" class="bg-gray-500 text-white px-6 py-2 rounded-lg hover:bg-gray-600 transition">
                                            Cancelar
                                        </button>
                                    </div>
                                </div>
                            </form>
                        </div>

                        <!-- Lista de Ventas -->
                        <div class="bg-white rounded-xl shadow-lg overflow-hidden">
                            <div class="overflow-x-auto">
                                <table class="min-w-full">
                                    <thead class="bg-gray-50">
                                        <tr>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Fecha</th>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Cliente</th>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Tipo</th>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Total</th>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Estado</th>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Acciones</th>
                                        </tr>
                                    </thead>
                                    <tbody id="salesList" class="bg-white divide-y divide-gray-200">
                                        <!-- Las ventas se cargarán aquí dinámicamente -->
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </section>

                    <!-- Sección de Compras -->
                    <section id="compras" class="content-section hidden fade-in">
                        <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 gap-4">
                            <h2 class="text-2xl font-bold text-gray-800">Gestión de Compras</h2>
                            <button onclick="showPurchaseForm()" class="bg-orange-500 text-white px-4 py-2 rounded-lg hover:bg-orange-600 transition">
                                <i class="fas fa-plus mr-2"></i>Nueva Compra
                            </button>
                        </div>

                        <!-- Formulario de Compra -->
                        <div id="purchaseForm" class="hidden bg-white p-6 rounded-xl shadow-lg mb-6">
                            <h3 class="text-lg font-semibold text-gray-800 mb-4">Registrar Compra</h3>
                            <form id="purchaseFormElement" class="space-y-4">
                                <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-1">Proveedor</label>
                                        <input type="text" id="supplierName" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500" required>
                                    </div>
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-1">Número de Factura</label>
                                        <input type="text" id="invoiceNumber" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500">
                                    </div>
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-1">Fecha</label>
                                        <input type="date" id="purchaseDate" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500" required>
                                    </div>
                                </div>

                                <div class="border rounded-lg p-4">
                                    <h4 class="font-semibold text-gray-700 mb-3">Detalle de Compra</h4>
                                    <div id="purchaseLines" class="space-y-2">
                                        <!-- Las líneas se agregarán dinámicamente -->
                                    </div>
                                    <button type="button" onclick="addPurchaseLine()" class="mt-3 text-orange-600 hover:text-orange-700">
                                        <i class="fas fa-plus mr-1"></i>Agregar Ítem
                                    </button>
                                </div>

                                <div class="flex justify-between items-center pt-4 border-t">
                                    <div class="text-xl font-bold">
                                        Total: $<span id="purchaseTotal">0.00</span>
                                    </div>
                                    <div class="flex gap-2">
                                        <button type="submit" class="bg-green-500 text-white px-6 py-2 rounded-lg hover:bg-green-600 transition">
                                            <i class="fas fa-check mr-2"></i>Registrar Compra
                                        </button>
                                        <button type="button" onclick="hidePurchaseForm()" class="bg-gray-500 text-white px-6 py-2 rounded-lg hover:bg-gray-600 transition">
                                            Cancelar
                                        </button>
                                    </div>
                                </div>
                            </form>
                        </div>

                        <!-- Lista de Compras -->
                        <div class="bg-white rounded-xl shadow-lg overflow-hidden">
                            <div class="overflow-x-auto">
                                <table class="min-w-full">
                                    <thead class="bg-gray-50">
                                        <tr>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Fecha</th>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Proveedor</th>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Factura</th>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Total</th>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Estado</th>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Acciones</th>
                                        </tr>
                                    </thead>
                                    <tbody id="purchasesList" class="bg-white divide-y divide-gray-200">
                                        <!-- Las compras se cargarán aquí dinámicamente -->
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </section>

                    <!-- Sección de Contabilidad -->
                    <section id="contabilidad" class="content-section hidden fade-in">
                        <h2 class="text-2xl font-bold text-gray-800 mb-6">Módulo de Contabilidad</h2>
                        
                        <!-- Menú de Contabilidad -->
                        <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                            <button onclick="showAccountingSubsection('polizas')" class="bg-white p-4 rounded-xl shadow-lg hover-scale text-center">
                                <i class="fas fa-file-invoice text-3xl text-blue-500 mb-2"></i>
                                <p class="font-semibold">Pólizas Contables</p>
                            </button>
                            <button onclick="showAccountingSubsection('catalogo')" class="bg-white p-4 rounded-xl shadow-lg hover-scale text-center">
                                <i class="fas fa-list text-3xl text-green-500 mb-2"></i>
                                <p class="font-semibold">Catálogo de Cuentas</p>
                            </button>
                            <button onclick="showAccountingSubsection('balanza')" class="bg-white p-4 rounded-xl shadow-lg hover-scale text-center">
                                <i class="fas fa-balance-scale text-3xl text-purple-500 mb-2"></i>
                                <p class="font-semibold">Balanza de Comprobación</p>
                            </button>
                        </div>

                        <!-- Subsección de Pólizas -->
                        <div id="polizas-subsection" class="accounting-subsection">
                            <div class="bg-white p-6 rounded-xl shadow-lg">
                                <div class="flex justify-between items-center mb-4">
                                    <h3 class="text-lg font-semibold text-gray-800">Pólizas Contables</h3>
                                    <button onclick="showPolizaForm()" class="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition">
                                        <i class="fas fa-plus mr-2"></i>Nueva Póliza
                                    </button>
                                </div>

                                <!-- Formulario de Póliza -->
                                <div id="polizaForm" class="hidden border rounded-lg p-4 mb-4 bg-gray-50">
                                    <form id="polizaFormElement" class="space-y-4">
                                        <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
                                            <div>
                                                <label class="block text-sm font-medium text-gray-700 mb-1">Tipo</label>
                                                <select id="polizaTipo" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500" onchange="generatePolizaNumber()">
                                                    <option value="Ingreso">Ingreso</option>
                                                    <option value="Egreso">Egreso</option>
                                                    <option value="Diario">Diario</option>
                                                    <option value="Ajuste">Ajuste</option>
                                                </select>
                                            </div>
                                            <div>
                                                <label class="block text-sm font-medium text-gray-700 mb-1">Fecha</label>
                                                <input type="date" id="polizaFecha" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500" required>
                                            </div>
                                            <div>
                                                <label class="block text-sm font-medium text-gray-700 mb-1">Número</label>
                                                <input type="text" id="polizaNumero" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500" placeholder="Auto" readonly>
                                            </div>
                                            <div>
                                                <label class="block text-sm font-medium text-gray-700 mb-1">Referencia</label>
                                                <input type="text" id="polizaReferencia" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                                            </div>
                                        </div>
                                        <div>
                                            <label class="block text-sm font-medium text-gray-700 mb-1">Concepto</label>
                                            <input type="text" id="polizaConcepto" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500" required>
                                        </div>

                                        <!-- Movimientos Contables -->
                                        <div class="border rounded-lg p-4">
                                            <h4 class="font-semibold text-gray-700 mb-3">Movimientos</h4>
                                            <div class="overflow-x-auto">
                                                <table class="min-w-full">
                                                    <thead>
                                                        <tr class="text-xs">
                                                            <th class="px-2 py-1 text-left">Cuenta</th>
                                                            <th class="px-2 py-1 text-left">Descripción</th>
                                                            <th class="px-2 py-1 text-right">Debe</th>
                                                            <th class="px-2 py-1 text-right">Haber</th>
                                                            <th class="px-2 py-1"></th>
                                                        </tr>
                                                    </thead>
                                                    <tbody id="polizaMovimientos">
                                                        <!-- Los movimientos se agregarán dinámicamente -->
                                                    </tbody>
                                                    <tfoot>
                                                        <tr class="font-semibold border-t">
                                                            <td colspan="2" class="px-2 py-2 text-right">Totales:</td>
                                                            <td class="px-2 py-2 text-right">$<span id="totalDebe">0.00</span></td>
                                                            <td class="px-2 py-2 text-right">$<span id="totalHaber">0.00</span></td>
                                                            <td></td>
                                                        </tr>
                                                    </tfoot>
                                                </table>
                                            </div>
                                            <button type="button" onclick="addPolizaMovimiento()" class="mt-3 text-blue-600 hover:text-blue-700">
                                                <i class="fas fa-plus mr-1"></i>Agregar Movimiento
                                            </button>
                                        </div>

                                        <div class="flex gap-2">
                                            <button type="submit" class="bg-green-500 text-white px-6 py-2 rounded-lg hover:bg-green-600 transition">
                                                <i class="fas fa-save mr-2"></i>Guardar Póliza
                                            </button>
                                            <button type="button" onclick="hidePolizaForm()" class="bg-gray-500 text-white px-6 py-2 rounded-lg hover:bg-gray-600 transition">
                                                Cancelar
                                            </button>
                                        </div>
                                    </form>
                                </div>

                                <!-- Lista de Pólizas -->
                                <div class="overflow-x-auto">
                                    <table class="min-w-full">
                                        <thead class="bg-gray-50">
                                            <tr>
                                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Fecha</th>
                                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Tipo</th>
                                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Número</th>
                                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Concepto</th>
                                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Total</th>
                                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Acciones</th>
                                            </tr>
                                        </thead>
                                        <tbody id="polizasList" class="bg-white divide-y divide-gray-200">
                                            <!-- Las pólizas se cargarán aquí dinámicamente -->
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>

                        <!-- Subsección de Catálogo de Cuentas -->
                        <div id="catalogo-subsection" class="accounting-subsection hidden">
                            <div class="bg-white p-6 rounded-xl shadow-lg">
                                <div class="flex justify-between items-center mb-4">
                                    <h3 class="text-lg font-semibold text-gray-800">Catálogo de Cuentas</h3>
                                    <button onclick="showCuentaForm()" class="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600 transition">
                                        <i class="fas fa-plus mr-2"></i>Nueva Cuenta
                                    </button>
                                </div>

                                <!-- Formulario de Cuenta -->
                                <div id="cuentaForm" class="hidden border rounded-lg p-4 mb-4 bg-gray-50">
                                    <form id="cuentaFormElement" class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                        <div>
                                            <label class="block text-sm font-medium text-gray-700 mb-1">Clave</label>
                                            <input type="text" id="cuentaClave" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500" required>
                                        </div>
                                        <div>
                                            <label class="block text-sm font-medium text-gray-700 mb-1">Nombre</label>
                                            <input type="text" id="cuentaNombre" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500" required>
                                        </div>
                                        <div>
                                            <label class="block text-sm font-medium text-gray-700 mb-1">Tipo</label>
                                            <select id="cuentaTipo" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500">
                                                <option value="Activo">Activo</option>
                                                <option value="Pasivo">Pasivo</option>
                                                <option value="Capital">Capital</option>
                                                <option value="Ingreso">Ingreso</option>
                                                <option value="Gasto">Gasto</option>
                                            </select>
                                        </div>
                                        <div>
                                            <label class="block text-sm font-medium text-gray-700 mb-1">Naturaleza</label>
                                            <select id="cuentaNaturaleza" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500">
                                                <option value="Deudora">Deudora</option>
                                                <option value="Acreedora">Acreedora</option>
                                            </select>
                                        </div>
                                        <div class="md:col-span-2 flex gap-2">
                                            <button type="submit" class="bg-green-500 text-white px-6 py-2 rounded-lg hover:bg-green-600 transition">
                                                <i class="fas fa-save mr-2"></i>Guardar
                                            </button>
                                            <button type="button" onclick="hideCuentaForm()" class="bg-gray-500 text-white px-6 py-2 rounded-lg hover:bg-gray-600 transition">
                                                Cancelar
                                            </button>
                                        </div>
                                    </form>
                                </div>

                                <!-- Lista de Cuentas -->
                                <div class="overflow-x-auto">
                                    <table class="min-w-full">
                                        <thead class="bg-gray-50">
                                            <tr>
                                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Clave</th>
                                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Nombre</th>
                                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Tipo</th>
                                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Naturaleza</th>
                                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Saldo</th>
                                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Acciones</th>
                                            </tr>
                                        </thead>
                                        <tbody id="cuentasList" class="bg-white divide-y divide-gray-200">
                                            <!-- Las cuentas se cargarán aquí dinámicamente -->
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>

                        <!-- Subsección de Balanza de Comprobación -->
                        <div id="balanza-subsection" class="accounting-subsection hidden">
                            <div class="bg-white p-6 rounded-xl shadow-lg">
                                <h3 class="text-lg font-semibold text-gray-800 mb-4">Balanza de Comprobación</h3>
                                <div class="flex flex-col sm:flex-row gap-4 mb-4">
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-1">Desde</label>
                                        <input type="date" id="balanzaDesde" class="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500">
                                    </div>
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-1">Hasta</label>
                                        <input type="date" id="balanzaHasta" class="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500">
                                    </div>
                                    <div class="flex items-end">
                                        <button onclick="generarBalanza()" class="bg-purple-500 text-white px-4 py-2 rounded-lg hover:bg-purple-600 transition">
                                            <i class="fas fa-sync mr-2"></i>Generar
                                        </button>
                                    </div>
                                </div>

                                <div class="overflow-x-auto">
                                    <table class="min-w-full">
                                        <thead class="bg-gray-50">
                                            <tr>
                                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Cuenta</th>
                                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Nombre</th>
                                                <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Saldo Inicial</th>
                                                <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Cargos</th>
                                                <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Abonos</th>
                                                <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Saldo Final</th>
                                            </tr>
                                        </thead>
                                        <tbody id="balanzaList" class="bg-white divide-y divide-gray-200">
                                            <!-- La balanza se cargará aquí dinámicamente -->
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </section>

                    <!-- Sección de Reportes -->
                    <section id="reportes" class="content-section hidden fade-in">
                        <h2 class="text-2xl font-bold text-gray-800 mb-6">Reportes Financieros</h2>
                        
                        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                            <div class="bg-white p-6 rounded-xl shadow-lg hover-scale">
                                <i class="fas fa-file-invoice-dollar text-4xl text-green-500 mb-4"></i>
                                <h3 class="text-lg font-semibold text-gray-800 mb-2">Estado de Resultados</h3>
                                <p class="text-gray-600 mb-4">Genera el estado de resultados del período seleccionado</p>
                                <button onclick="generarEstadoResultados()" class="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600 transition w-full">
                                    <i class="fas fa-print mr-2"></i>Generar
                                </button>
                            </div>

                            <div class="bg-white p-6 rounded-xl shadow-lg hover-scale">
                                <i class="fas fa-balance-scale-right text-4xl text-blue-500 mb-4"></i>
                                <h3 class="text-lg font-semibold text-gray-800 mb-2">Balance General</h3>
                                <p class="text-gray-600 mb-4">Visualiza la situación financiera de la empresa</p>
                                <button onclick="generarBalanceGeneral()" class="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition w-full">
                                    <i class="fas fa-print mr-2"></i>Generar
                                </button>
                            </div>

                            <div class="bg-white p-6 rounded-xl shadow-lg hover-scale">
                                <i class="fas fa-hand-holding-usd text-4xl text-purple-500 mb-4"></i>
                                <h3 class="text-lg font-semibold text-gray-800 mb-2">Flujo de Efectivo</h3>
                                <p class="text-gray-600 mb-4">Analiza el flujo de efectivo del período</p>
                                <button onclick="generarFlujoEfectivo()" class="bg-purple-500 text-white px-4 py-2 rounded-lg hover:bg-purple-600 transition w-full">
                                    <i class="fas fa-print mr-2"></i>Generar
                                </button>
                            </div>

                            <div class="bg-white p-6 rounded-xl shadow-lg hover-scale">
                                <i class="fas fa-chart-pie text-4xl text-orange-500 mb-4"></i>
                                <h3 class="text-lg font-semibold text-gray-800 mb-2">Análisis de Ventas</h3>
                                <p class="text-gray-600 mb-4">Reportes detallados de ventas por producto y período</p>
                                <button onclick="generarAnalisisVentas()" class="bg-orange-500 text-white px-4 py-2 rounded-lg hover:bg-orange-600 transition w-full">
                                    <i class="fas fa-chart-bar mr-2"></i>Analizar
                                </button>
                            </div>

                            <div class="bg-white p-6 rounded-xl shadow-lg hover-scale">
                                <i class="fas fa-boxes text-4xl text-indigo-500 mb-4"></i>
                                <h3 class="text-lg font-semibold text-gray-800 mb-2">Inventario</h3>
                                <p class="text-gray-600 mb-4">Estado actual del inventario y movimientos</p>
                                <button onclick="generarReporteInventario()" class="bg-indigo-500 text-white px-4 py-2 rounded-lg hover:bg-indigo-600 transition w-full">
                                    <i class="fas fa-list mr-2"></i>Ver Inventario
                                </button>
                            </div>

                            <div class="bg-white p-6 rounded-xl shadow-lg hover-scale">
                                <i class="fas fa-file-export text-4xl text-gray-600 mb-4"></i>
                                <h3 class="text-lg font-semibold text-gray-800 mb-2">Exportar Datos</h3>
                                <p class="text-gray-600 mb-4">Descarga reportes en formato Excel o PDF</p>
                                <button onclick="mostrarOpcionesExportar()" class="bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700 transition w-full">
                                    <i class="fas fa-download mr-2"></i>Exportar
                                </button>
                            </div>
                        </div>

                        <!-- Área de visualización de reportes -->
                        <div id="reportViewer" class="hidden mt-6 bg-white p-6 rounded-xl shadow-lg">
                            <div class="flex justify-between items-center mb-4">
                                <h3 id="reportTitle" class="text-lg font-semibold text-gray-800"></h3>
                                <div class="flex gap-2">
                                    <button onclick="printReport()" class="text-gray-600 hover:text-gray-800">
                                        <i class="fas fa-print text-xl"></i>
                                    </button>
                                    <button onclick="closeReportViewer()" class="text-gray-500 hover:text-gray-700">
                                        <i class="fas fa-times text-xl"></i>
                                    </button>
                                </div>
                            </div>
                            <div id="reportContent" class="overflow-x-auto">
                                <!-- El contenido del reporte se cargará aquí -->
                            </div>
                        </div>
                    </section>

                    <!-- Sección de Configuración -->
                    <section id="configuracion" class="content-section hidden fade-in">
                        <h2 class="text-2xl font-bold text-gray-800 mb-6">Configuración del Sistema</h2>
                        
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <!-- Información de la Empresa -->
                            <div class="bg-white p-6 rounded-xl shadow-lg">
                                <h3 class="text-lg font-semibold text-gray-800 mb-4">Información de la Empresa</h3>
                                <form id="empresaForm" class="space-y-4">
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-1">Nombre de la Empresa</label>
                                        <input type="text" id="empresaNombre" value="Malanguísimas" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500">
                                    </div>
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-1">RFC</label>
                                        <input type="text" id="empresaRFC" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500">
                                    </div>
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-1">Dirección</label>
                                        <textarea id="empresaDireccion" rows="3" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500"></textarea>
                                    </div>
                                    <button type="submit" class="bg-orange-500 text-white px-6 py-2 rounded-lg hover:bg-orange-600 transition">
                                        <i class="fas fa-save mr-2"></i>Guardar Cambios
                                    </button>
                                </form>
                            </div>

                            <!-- Estado de conexión y Respaldo -->
                            <div class="bg-white p-6 rounded-xl shadow-lg">
                                <h3 class="text-lg font-semibold text-gray-800 mb-4">Estado del Sistema</h3>
                                <div class="space-y-4">
                                    <div class="p-4 rounded-lg bg-gray-50">
                                        <p class="text-sm text-gray-600 mb-1">Estado de Firebase:</p>
                                        <p id="firebaseStatus" class="font-semibold">
                                            <i class="fas fa-circle text-gray-400 mr-2"></i>Verificando...
                                        </p>
                                    </div>
                                    <div class="p-4 rounded-lg bg-gray-50">
                                        <p class="text-sm text-gray-600 mb-1">Modo actual:</p>
                                        <p id="currentMode" class="font-semibold">
                                            <i class="fas fa-database mr-2"></i>Producción
                                        </p>
                                    </div>
                                    <button onclick="crearRespaldo()" class="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600 transition w-full">
                                        <i class="fas fa-cloud-upload-alt mr-2"></i>Crear Respaldo Manual
                                    </button>
                                    <button onclick="verRespaldos()" class="bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700 transition w-full">
                                        <i class="fas fa-history mr-2"></i>Ver Respaldos
                                    </button>
                                </div>
                            </div>

                            <!-- Configuración Fiscal -->
                            <div class="bg-white p-6 rounded-xl shadow-lg">
                                <h3 class="text-lg font-semibold text-gray-800 mb-4">Configuración Fiscal</h3>
                                <form id="fiscalForm" class="space-y-4">
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-1">Tasa de IVA (%)</label>
                                        <input type="number" id="tasaIVA" value="16" step="0.01" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500">
                                    </div>
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-1">Tasa de ISR (%)</label>
                                        <input type="number" id="tasaISR" value="30" step="0.01" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500">
                                    </div>
                                    <button type="submit" class="bg-orange-500 text-white px-6 py-2 rounded-lg hover:bg-orange-600 transition">
                                        <i class="fas fa-save mr-2"></i>Guardar Configuración
                                    </button>
                                </form>
                            </div>
                        </div>
                    </section>
                </main>
            </div>
        </div>
    </div>

    <script>
        // Configuración de Firebase
        const firebaseConfig = {
            apiKey: "AIzaSyAA74GDCBz99C2c1J8ngoJwVaFXMRyHaLg",
            authDomain: "erp-malanguisimas.firebaseapp.com",
            projectId: "erp-malanguisimas",
            storageBucket: "erp-malanguisimas.firebasestorage.app",
            messagingSenderId: "168435151109",
            appId: "1:168435151109:web:7c9eeb80a1a023fba1876c",
            measurementId: "G-SL1MHR7V8S"
        };

        // Variables globales
        let db = null;
        let isFirebaseConnected = false;
        let isDemoMode = false;
        let currentSection = 'dashboard';
        let products = [];
        let accounts = [];
        let sales = [];
        let purchases = [];
        let polizas = [];
        let chartInstances = {};

        // Funciones de utilidad
        function showLoader() {
            document.getElementById('globalLoader').classList.remove('hidden');
        }

        function hideLoader() {
            document.getElementById('globalLoader').classList.add('hidden');
        }

        function showError(message) {
            document.getElementById('errorText').textContent = message;
            document.getElementById('errorMessage').style.display = 'block';
            setTimeout(hideError, 5000);
        }

        function hideError() {
            document.getElementById('errorMessage').style.display = 'none';
        }

        function formatCurrency(amount) {
            return new Intl.NumberFormat('es-MX', {
                style: 'currency',
                currency: 'MXN'
            }).format(amount || 0);
        }

        function formatDate(date) {
            if (!date) return '';
            return new Date(date).toLocaleDateString('es-MX');
        }

        // Inicializar Firebase con manejo de errores
        async function initializeFirebase() {
            showLoader();
            try {
                console.log('Iniciando conexión con Firebase...');
                firebase.initializeApp(firebaseConfig);
                db = firebase.firestore();
                
                // Verificar conexión
                await db.collection('test').doc('connection').set({
                    timestamp: firebase.firestore.FieldValue.serverTimestamp(),
                    status: 'connected'
                });
                
                isFirebaseConnected = true;
                console.log('✅ Firebase conectado exitosamente');
                updateFirebaseStatus(true);
                
                // Iniciar analytics si está disponible
                try {
                    firebase.analytics();
                } catch (e) {
                    console.log('Analytics no disponible');
                }
                
                // Cargar datos iniciales
                await loadInitialData();
                
            } catch (error) {
                console.error('❌ Error conectando con Firebase:', error);
                isFirebaseConnected = false;
                updateFirebaseStatus(false);
                
                // Mostrar botón de modo demo
                document.getElementById('modoDemoBtn').classList.remove('hidden');
                
                showError('No se pudo conectar con Firebase. Puedes usar el Modo Demo para explorar la aplicación.');
                
                // Activar modo demo automáticamente si falla la conexión
                setTimeout(() => {
                    if (!isFirebaseConnected) {
                        activarModoDemo();
                    }
                }, 2000);
            } finally {
                hideLoader();
            }
        }

        // Actualizar estado de Firebase en UI
        function updateFirebaseStatus(connected) {
            const statusEl = document.getElementById('firebaseStatus');
            if (connected) {
                statusEl.innerHTML = '<i class="fas fa-circle text-green-500 mr-2"></i>Conectado';
            } else {
                statusEl.innerHTML = '<i class="fas fa-circle text-red-500 mr-2"></i>Desconectado';
            }
        }

        // Modo Demo
        function activarModoDemo() {
            isDemoMode = true;
            document.getElementById('demoWarning').classList.remove('hidden');
            document.getElementById('currentMode').innerHTML = '<i class="fas fa-desktop mr-2"></i>Demo Local';
            document.getElementById('modoDemoBtn').disabled = true;
            document.getElementById('modoDemoBtn').textContent = 'Modo Demo Activo';
            
            // Cargar datos de demostración
            loadDemoData();
            showSection('dashboard');
        }

        // Cargar datos de demostración
        function loadDemoData() {
            // Productos de demo
            products = [
                { id: '1', name: 'Malanguitas', category: 'chips', size: '50g', flavor: 'fuego', wholesalePrice: 20, retailPrice: 25, stock: 100, barcode: '1234567890' },
                { id: '2', name: 'Malanguitas', category: 'chips', size: '50g', flavor: 'habanero', wholesalePrice: 20, retailPrice: 25, stock: 75, barcode: '1234567891' },
                { id: '3', name: 'Malanguitas', category: 'chips', size: '100g', flavor: 'jalapeño', wholesalePrice: 33, retailPrice: 40, stock: 50, barcode: '1234567892' },
                { id: '4', name: 'Malanguitas', category: 'chips', size: '100g', flavor: 'natural', wholesalePrice: 33, retailPrice: 40, stock: 8, barcode: '1234567893' }
            ];
            
            // Cuentas contables de demo
            accounts = [
                { id: '1', clave: '1101', nombre: 'Caja', tipo: 'Activo', naturaleza: 'Deudora', saldo: 15000 },
                { id: '2', clave: '1102', nombre: 'Bancos', tipo: 'Activo', naturaleza: 'Deudora', saldo: 50000 },
                { id: '3', clave: '1104', nombre: 'Inventarios', tipo: 'Activo', naturaleza: 'Deudora', saldo: 25000 },
                { id: '4', clave: '4001', nombre: 'Ventas', tipo: 'Ingreso', naturaleza: 'Acreedora', saldo: 80000 }
            ];
            
            // Ventas de demo
            const today = new Date();
            sales = [
                {
                    id: '1',
                    customerName: 'Tienda La Esquina',
                    customerType: 'menudeo',
                    date: new Date(today.getTime() - 2 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
                    lines: [
                        { productId: '1', quantity: 10, price: 25, subtotal: 250 },
                        { productId: '2', quantity: 5, price: 25, subtotal: 125 }
                    ],
                    total: 375,
                    status: 'pagada'
                },
                {
                    id: '2',
                    customerName: 'Abarrotes San Juan',
                    customerType: 'mayoreo',
                    date: today.toISOString().split('T')[0],
                    lines: [
                        { productId: '3', quantity: 20, price: 33, subtotal: 660 },
                        { productId: '4', quantity: 15, price: 33, subtotal: 495 }
                    ],
                    total: 1155,
                    status: 'pagada'
                }
            ];
            
            // Actualizar las listas
            loadProductsList();
            loadSalesList();
            loadAccountsList();
            updateDashboard();
        }

        // Funciones de navegación
        function toggleSidebar() {
            const sidebar = document.getElementById('sidebar');
            const overlay = document.getElementById('sidebarOverlay');
            sidebar.classList.toggle('sidebar-closed');
            overlay.classList.toggle('hidden');
        }

        function showSection(section) {
            document.querySelectorAll('.content-section').forEach(s => s.classList.add('hidden'));
            document.getElementById(section).classList.remove('hidden');
            currentSection = section;
            
            document.querySelectorAll('.menu-item').forEach(item => {
                item.classList.remove('bg-gray-700');
            });
            
            if (event && event.target) {
                event.target.classList.add('bg-gray-700');
            }
            
            if (window.innerWidth < 768) {
                toggleSidebar();
            }

            if (section === 'contabilidad') {
                showAccountingSubsection('polizas');
            }
        }

        // Funciones de productos
        function showProductForm() {
            document.getElementById('productForm').classList.remove('hidden');
            document.getElementById('productFormElement').reset();
            document.getElementById('productId').value = '';
            setupProductPrices();
        }

        function setupProductPrices() {
            const categorySelect = document.getElementById('productCategory');
            const sizeSelect = document.getElementById('productSize');
            
            function updatePrices() {
                if (categorySelect.value === 'chips') {
                    if (sizeSelect.value === '50g') {
                        document.getElementById('wholesalePrice').value = 20;
                        document.getElementById('retailPrice').value = 25;
                    } else if (sizeSelect.value === '100g') {
                        document.getElementById('wholesalePrice').value = 33;
                        document.getElementById('retailPrice').value = 40;
                    }
                }
            }
            
            categorySelect.addEventListener('change', updatePrices);
            sizeSelect.addEventListener('change', updatePrices);
            updatePrices();
        }

        function hideProductForm() {
            document.getElementById('productForm').classList.add('hidden');
        }

        function loadProductsList() {
            const tbody = document.getElementById('productsList');
            tbody.innerHTML = '';
            
            products.forEach(product => {
                tbody.innerHTML += `
                    <tr>
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${product.name}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${product.size}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${product.flavor}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 ${product.stock < 10 ? 'text-red-600 font-bold' : ''}">${product.stock}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${formatCurrency(product.wholesalePrice)}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${formatCurrency(product.retailPrice)}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                            <button onclick="editProduct('${product.id}')" class="text-indigo-600 hover:text-indigo-900 mr-2">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button onclick="deleteProduct('${product.id}')" class="text-red-600 hover:text-red-900">
                                <i class="fas fa-trash"></i>
                            </button>
                        </td>
                    </tr>
                `;
            });
        }

        function loadSalesList() {
            const tbody = document.getElementById('salesList');
            tbody.innerHTML = '';
            
            sales.forEach(sale => {
                tbody.innerHTML += `
                    <tr>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${formatDate(sale.date)}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${sale.customerName}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                            <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${sale.customerType === 'mayoreo' ? 'bg-blue-100 text-blue-800' : 'bg-green-100 text-green-800'}">
                                ${sale.customerType}
                            </span>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${formatCurrency(sale.total)}</td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                                ${sale.status}
                            </span>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                            <button onclick="viewSale('${sale.id}')" class="text-indigo-600 hover:text-indigo-900 mr-2">
                                <i class="fas fa-eye"></i>
                            </button>
                            <button onclick="printSale('${sale.id}')" class="text-gray-600 hover:text-gray-900">
                                <i class="fas fa-print"></i>
                            </button>
                        </td>
                    </tr>
                `;
            });
        }

        function loadAccountsList() {
            const tbody = document.getElementById('cuentasList');
            tbody.innerHTML = '';
            
            accounts.forEach(account => {
                tbody.innerHTML += `
                    <tr>
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${account.clave}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${account.nombre}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${account.tipo}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${account.naturaleza}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${formatCurrency(account.saldo || 0)}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                            <span class="text-gray-400">Sin acciones</span>
                        </td>
                    </tr>
                `;
            });
        }

        // Actualizar dashboard
        function updateDashboard() {
            const now = new Date();
            const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);
            
            const ventasMes = sales.filter(sale => {
                const saleDate = new Date(sale.date);
                return saleDate >= startOfMonth;
            }).reduce((sum, sale) => sum + sale.total, 0);
            
            const totalStock = products.reduce((sum, product) => sum + product.stock, 0);
            const clientesUnicos = new Set(sales.map(s => s.customerName)).size;
            const utilidadNeta = ventasMes * 0.3;
            
            document.getElementById('ventasMes').textContent = formatCurrency(ventasMes);
            document.getElementById('totalStock').textContent = totalStock;
            document.getElementById('clientesActivos').textContent = clientesUnicos;
            document.getElementById('utilidadNeta').textContent = formatCurrency(utilidadNeta);
            
            updateCharts();
        }

        // Actualizar gráficos
        function updateCharts() {
            // Limpiar gráficos anteriores
            Object.values(chartInstances).forEach(chart => {
                if (chart) chart.destroy();
            });
            
            // Datos para el gráfico de ventas por sabor
            const salesByFlavor = {};
            sales.forEach(sale => {
                sale.lines.forEach(line => {
                    const product = products.find(p => p.id === line.productId);
                    if (product) {
                        salesByFlavor[product.flavor] = (salesByFlavor[product.flavor] || 0) + line.subtotal;
                    }
                });
            });
            
            // Gráfico de dona
            const ctx1 = document.getElementById('salesChart');
            if (ctx1) {
                chartInstances.salesChart = new Chart(ctx1.getContext('2d'), {
                    type: 'doughnut',
                    data: {
                        labels: Object.keys(salesByFlavor),
                        datasets: [{
                            data: Object.values(salesByFlavor),
                            backgroundColor: ['#ff6384', '#ff9f40', '#4bc0c0', '#9966ff', '#ffce56']
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false
                    }
                });
            }
            
            // Gráfico de línea (tendencia)
            const last7Days = [];
            const salesByDay = {};
            
            for (let i = 6; i >= 0; i--) {
                const date = new Date();
                date.setDate(date.getDate() - i);
                const dateStr = date.toISOString().split('T')[0];
                last7Days.push(dateStr);
                salesByDay[dateStr] = 0;
            }
            
            sales.forEach(sale => {
                if (salesByDay.hasOwnProperty(sale.date)) {
                    salesByDay[sale.date] += sale.total;
                }
            });
            
            const ctx2 = document.getElementById('trendChart');
            if (ctx2) {
                chartInstances.trendChart = new Chart(ctx2.getContext('2d'), {
                    type: 'line',
                    data: {
                        labels: last7Days.map(d => new Date(d).getDate()),
                        datasets: [{
                            label: 'Ventas',
                            data: last7Days.map(date => salesByDay[date]),
                            borderColor: 'rgb(251, 146, 60)',
                            tension: 0.3
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false
                    }
                });
            }
        }

        // Funciones de ventas
        function showSaleForm() {
            document.getElementById('saleForm').classList.remove('hidden');
            document.getElementById('saleDate').value = new Date().toISOString().split('T')[0];
            document.getElementById('saleLines').innerHTML = '';
            addSaleLine();
        }

        function hideSaleForm() {
            document.getElementById('saleForm').classList.add('hidden');
            document.getElementById('saleFormElement').reset();
        }

        function addSaleLine() {
            const linesContainer = document.getElementById('saleLines');
            const lineId = Date.now();
            
            const lineHTML = `
                <div class="sale-line grid grid-cols-1 md:grid-cols-5 gap-2 p-2 border rounded" data-line-id="${lineId}">
                    <select class="product-select px-3 py-2 border border-gray-300 rounded-lg md:col-span-2" onchange="updateSaleLinePrice(${lineId})">
                        <option value="">Seleccionar producto</option>
                        ${products.map(p => `<option value="${p.id}" data-wholesale="${p.wholesalePrice}" data-retail="${p.retailPrice}">${p.name} - ${p.size} - ${p.flavor}</option>`).join('')}
                    </select>
                    <input type="number" class="quantity-input px-3 py-2 border border-gray-300 rounded-lg" placeholder="Cantidad" min="1" onchange="updateSaleTotal()">
                    <input type="number" class="price-input px-3 py-2 border border-gray-300 rounded-lg" placeholder="Precio" step="0.01" readonly>
                    <div class="flex gap-2">
                        <input type="number" class="subtotal-input flex-1 px-3 py-2 border border-gray-300 rounded-lg" placeholder="Subtotal" step="0.01" readonly>
                        <button type="button" onclick="removeSaleLine(${lineId})" class="text-red-500 hover:text-red-700 px-3">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
            `;
            
            linesContainer.insertAdjacentHTML('beforeend', lineHTML);
        }

        function updateSaleLinePrice(lineId) {
            const line = document.querySelector(`[data-line-id="${lineId}"]`);
            const productSelect = line.querySelector('.product-select');
            const priceInput = line.querySelector('.price-input');
            const customerType = document.getElementById('customerType').value;
            
            const selectedOption = productSelect.options[productSelect.selectedIndex];
            if (selectedOption.value) {
                const price = customerType === 'mayoreo' 
                    ? parseFloat(selectedOption.dataset.wholesale)
                    : parseFloat(selectedOption.dataset.retail);
                priceInput.value = price.toFixed(2);
            }
            
            updateSaleTotal();
        }

        function updateAllPrices() {
            document.querySelectorAll('.sale-line').forEach(line => {
                const lineId = line.dataset.lineId;
                updateSaleLinePrice(lineId);
            });
        }

        function removeSaleLine(lineId) {
            document.querySelector(`[data-line-id="${lineId}"]`).remove();
            updateSaleTotal();
        }

        function updateSaleTotal() {
            let total = 0;
            document.querySelectorAll('.sale-line').forEach(line => {
                const quantity = parseFloat(line.querySelector('.quantity-input').value) || 0;
                const price = parseFloat(line.querySelector('.price-input').value) || 0;
                const subtotal = quantity * price;
                line.querySelector('.subtotal-input').value = subtotal.toFixed(2);
                total += subtotal;
            });
            document.getElementById('saleTotal').textContent = total.toFixed(2);
        }

        // Funciones de compras
        function showPurchaseForm() {
            document.getElementById('purchaseForm').classList.remove('hidden');
            document.getElementById('purchaseDate').value = new Date().toISOString().split('T')[0];
            document.getElementById('purchaseLines').innerHTML = '';
            addPurchaseLine();
        }

        function hidePurchaseForm() {
            document.getElementById('purchaseForm').classList.add('hidden');
            document.getElementById('purchaseFormElement').reset();
        }

        function addPurchaseLine() {
            const linesContainer = document.getElementById('purchaseLines');
            const lineId = Date.now();
            
            const lineHTML = `
                <div class="purchase-line grid grid-cols-1 md:grid-cols-5 gap-2 p-2 border rounded" data-line-id="${lineId}">
                    <input type="text" class="item-description px-3 py-2 border border-gray-300 rounded-lg md:col-span-2" placeholder="Descripción">
                    <input type="number" class="quantity-input px-3 py-2 border border-gray-300 rounded-lg" placeholder="Cantidad" min="1" onchange="updatePurchaseTotal()">
                    <input type="number" class="price-input px-3 py-2 border border-gray-300 rounded-lg" placeholder="Precio unitario" step="0.01" onchange="updatePurchaseTotal()">
                    <div class="flex gap-2">
                        <input type="number" class="subtotal-input flex-1 px-3 py-2 border border-gray-300 rounded-lg" placeholder="Subtotal" step="0.01" readonly>
                        <button type="button" onclick="removePurchaseLine(${lineId})" class="text-red-500 hover:text-red-700 px-3">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
            `;
            
            linesContainer.insertAdjacentHTML('beforeend', lineHTML);
        }

        function removePurchaseLine(lineId) {
            document.querySelector(`[data-line-id="${lineId}"]`).remove();
            updatePurchaseTotal();
        }

        function updatePurchaseTotal() {
            let total = 0;
            document.querySelectorAll('.purchase-line').forEach(line => {
                const quantity = parseFloat(line.querySelector('.quantity-input').value) || 0;
                const price = parseFloat(line.querySelector('.price-input').value) || 0;
                const subtotal = quantity * price;
                line.querySelector('.subtotal-input').value = subtotal.toFixed(2);
                total += subtotal;
            });
            document.getElementById('purchaseTotal').textContent = total.toFixed(2);
        }

        // Funciones de contabilidad
        function showAccountingSubsection(subsection) {
            document.querySelectorAll('.accounting-subsection').forEach(s => s.classList.add('hidden'));
            document.getElementById(`${subsection}-subsection`).classList.remove('hidden');
        }

        function showPolizaForm() {
            document.getElementById('polizaForm').classList.remove('hidden');
            document.getElementById('polizaFecha').value = new Date().toISOString().split('T')[0];
            document.getElementById('polizaMovimientos').innerHTML = '';
            generatePolizaNumber();
            addPolizaMovimiento();
            addPolizaMovimiento();
        }

        function hidePolizaForm() {
            document.getElementById('polizaForm').classList.add('hidden');
            document.getElementById('polizaFormElement').reset();
        }

        function generatePolizaNumber() {
            const tipo = document.getElementById('polizaTipo').value;
            const prefix = tipo.substring(0, 3).toUpperCase();
            const year = new Date().getFullYear();
            const month = String(new Date().getMonth() + 1).padStart(2, '0');
            const number = polizas.filter(p => p.tipo === tipo).length + 1;
            document.getElementById('polizaNumero').value = `${prefix}-${year}${month}-${String(number).padStart(4, '0')}`;
        }

        function addPolizaMovimiento() {
            const tbody = document.getElementById('polizaMovimientos');
            const rowId = Date.now();
            
            const rowHTML = `
                <tr data-row-id="${rowId}">
                    <td class="px-2 py-1">
                        <select class="cuenta-select w-full px-2 py-1 border border-gray-300 rounded text-sm" required>
                            <option value="">Seleccionar</option>
                            ${accounts.map(a => `<option value="${a.clave}">${a.clave} - ${a.nombre}</option>`).join('')}
                        </select>
                    </td>
                    <td class="px-2 py-1">
                        <input type="text" class="descripcion-input w-full px-2 py-1 border border-gray-300 rounded text-sm" required>
                    </td>
                    <td class="px-2 py-1">
                        <input type="number" class="debe-input w-full px-2 py-1 border border-gray-300 rounded text-sm text-right" step="0.01" onchange="updatePolizaTotals()">
                    </td>
                    <td class="px-2 py-1">
                        <input type="number" class="haber-input w-full px-2 py-1 border border-gray-300 rounded text-sm text-right" step="0.01" onchange="updatePolizaTotals()">
                    </td>
                    <td class="px-2 py-1">
                        <button type="button" onclick="removePolizaMovimiento(${rowId})" class="text-red-500 hover:text-red-700">
                            <i class="fas fa-trash text-sm"></i>
                        </button>
                    </td>
                </tr>
            `;
            
            tbody.insertAdjacentHTML('beforeend', rowHTML);
        }

        function removePolizaMovimiento(rowId) {
            document.querySelector(`[data-row-id="${rowId}"]`).remove();
            updatePolizaTotals();
        }

        function updatePolizaTotals() {
            let totalDebe = 0;
            let totalHaber = 0;
            
            document.querySelectorAll('#polizaMovimientos tr').forEach(row => {
                totalDebe += parseFloat(row.querySelector('.debe-input').value) || 0;
                totalHaber += parseFloat(row.querySelector('.haber-input').value) || 0;
            });
            
            document.getElementById('totalDebe').textContent = totalDebe.toFixed(2);
            document.getElementById('totalHaber').textContent = totalHaber.toFixed(2);
        }

        function showCuentaForm() {
            document.getElementById('cuentaForm').classList.remove('hidden');
        }

        function hideCuentaForm() {
            document.getElementById('cuentaForm').classList.add('hidden');
            document.getElementById('cuentaFormElement').reset();
        }

        function generarBalanza() {
            const desde = document.getElementById('balanzaDesde').value;
            const hasta = document.getElementById('balanzaHasta').value;
            
            if (!desde || !hasta) {
                alert('Selecciona ambas fechas');
                return;
            }
            
            const tbody = document.getElementById('balanzaList');
            tbody.innerHTML = '';
            
            let totalCargos = 0;
            let totalAbonos = 0;
            
            accounts.forEach(account => {
                const cargos = Math.random() * 10000;
                const abonos = Math.random() * 10000;
                totalCargos += cargos;
                totalAbonos += abonos;
                
                tbody.innerHTML += `
                    <tr>
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${account.clave}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${account.nombre}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 text-right">${formatCurrency(account.saldo || 0)}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 text-right">${formatCurrency(cargos)}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 text-right">${formatCurrency(abonos)}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 text-right">${formatCurrency(Math.abs((account.saldo || 0) + cargos - abonos))}</td>
                    </tr>
                `;
            });
            
            tbody.innerHTML += `
                <tr class="border-t-2 font-bold bg-gray-50">
                    <td colspan="3" class="px-6 py-4 text-right">TOTALES:</td>
                    <td class="px-6 py-4 text-right">${formatCurrency(totalCargos)}</td>
                    <td class="px-6 py-4 text-right">${formatCurrency(totalAbonos)}</td>
                    <td class="px-6 py-4"></td>
                </tr>
            `;
        }

        // Funciones de reportes
        function generarEstadoResultados() {
            const ventas = sales.reduce((sum, s) => sum + s.total, 0);
            const costoVentas = ventas * 0.6;
            const utilidadBruta = ventas - costoVentas;
            const gastosOperacion = ventas * 0.2;
            const utilidadOperacion = utilidadBruta - gastosOperacion;
            const isr = utilidadOperacion * 0.3;
            const utilidadNeta = utilidadOperacion - isr;
            
            const reportContent = `
                <div class="print-only text-center mb-4">
                    <h1 class="text-2xl font-bold">Malanguísimas</h1>
                    <h2 class="text-xl">Estado de Resultados</h2>
                    <p class="text-gray-600">Mes actual</p>
                </div>
                <table class="min-w-full">
                    <tbody>
                        <tr><td class="py-2">Ventas Netas</td><td class="py-2 text-right">${formatCurrency(ventas)}</td></tr>
                        <tr><td class="py-2">(-) Costo de Ventas</td><td class="py-2 text-right">${formatCurrency(costoVentas)}</td></tr>
                        <tr class="font-bold bg-gray-50"><td class="py-2">Utilidad Bruta</td><td class="py-2 text-right">${formatCurrency(utilidadBruta)}</td></tr>
                        <tr><td class="py-2">(-) Gastos de Operación</td><td class="py-2 text-right">${formatCurrency(gastosOperacion)}</td></tr>
                        <tr class="font-bold bg-gray-50"><td class="py-2">Utilidad de Operación</td><td class="py-2 text-right">${formatCurrency(utilidadOperacion)}</td></tr>
                        <tr><td class="py-2">(-) ISR (30%)</td><td class="py-2 text-right">${formatCurrency(isr)}</td></tr>
                        <tr class="font-bold bg-gray-100"><td class="py-2">UTILIDAD NETA</td><td class="py-2 text-right">${formatCurrency(utilidadNeta)}</td></tr>
                    </tbody>
                </table>
            `;
            
            showReport('Estado de Resultados', reportContent);
        }

        function generarBalanceGeneral() {
            alert('Función disponible próximamente');
        }

        function generarFlujoEfectivo() {
            alert('Función disponible próximamente');
        }

        function generarAnalisisVentas() {
            const salesByProduct = {};
            const salesByType = { mayoreo: 0, menudeo: 0 };
            
            sales.forEach(sale => {
                salesByType[sale.customerType] += sale.total;
                sale.lines.forEach(line => {
                    const product = products.find(p => p.id === line.productId);
                    if (product) {
                        const key = `${product.name} ${product.size}`;
                        salesByProduct[key] = (salesByProduct[key] || 0) + line.subtotal;
                    }
                });
            });
            
            const sortedProducts = Object.entries(salesByProduct)
                .sort((a, b) => b[1] - a[1])
                .slice(0, 5);
            
            const reportContent = `
                <div class="space-y-6">
                    <div>
                        <h3 class="font-bold text-lg mb-3">Ventas por Tipo de Cliente</h3>
                        <div class="grid grid-cols-2 gap-4">
                            <div class="bg-blue-50 p-4 rounded">
                                <p class="text-sm text-gray-600">Mayoreo</p>
                                <p class="text-2xl font-bold text-blue-600">${formatCurrency(salesByType.mayoreo)}</p>
                            </div>
                            <div class="bg-green-50 p-4 rounded">
                                <p class="text-sm text-gray-600">Menudeo</p>
                                <p class="text-2xl font-bold text-green-600">${formatCurrency(salesByType.menudeo)}</p>
                            </div>
                        </div>
                    </div>
                    
                    <div>
                        <h3 class="font-bold text-lg mb-3">Top 5 Productos</h3>
                        <table class="min-w-full">
                            <thead class="bg-gray-50">
                                <tr>
                                    <th class="px-4 py-2 text-left">Producto</th>
                                    <th class="px-4 py-2 text-right">Total Vendido</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${sortedProducts.map(([product, total]) => `
                                    <tr>
                                        <td class="px-4 py-2">${product}</td>
                                        <td class="px-4 py-2 text-right font-semibold">${formatCurrency(total)}</td>
                                    </tr>
                                `).join('')}
                            </tbody>
                        </table>
                    </div>
                </div>
            `;
            
            showReport('Análisis de Ventas', reportContent);
        }

        function generarReporteInventario() {
            const totalValue = products.reduce((sum, p) => sum + (p.stock * p.wholesalePrice), 0);
            
            const reportContent = `
                <div class="print-only text-center mb-4">
                    <h1 class="text-2xl font-bold">Malanguísimas</h1>
                    <h2 class="text-xl">Reporte de Inventario</h2>
                </div>
                
                <table class="min-w-full">
                    <thead class="bg-gray-50">
                        <tr>
                            <th class="px-4 py-2 text-left">Producto</th>
                            <th class="px-4 py-2 text-center">Stock</th>
                            <th class="px-4 py-2 text-right">Valor</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${products.map(p => `
                            <tr class="${p.stock < 10 ? 'bg-red-50' : ''}">
                                <td class="px-4 py-2">${p.name} ${p.size} - ${p.flavor}</td>
                                <td class="px-4 py-2 text-center ${p.stock < 10 ? 'text-red-600 font-bold' : ''}">${p.stock}</td>
                                <td class="px-4 py-2 text-right">${formatCurrency(p.stock * p.wholesalePrice)}</td>
                            </tr>
                        `).join('')}
                    </tbody>
                    <tfoot class="bg-gray-100 font-bold">
                        <tr>
                            <td class="px-4 py-2">TOTAL</td>
                            <td class="px-4 py-2 text-center">${products.reduce((sum, p) => sum + p.stock, 0)}</td>
                            <td class="px-4 py-2 text-right">${formatCurrency(totalValue)}</td>
                        </tr>
                    </tfoot>
                </table>
            `;
            
            showReport('Reporte de Inventario', reportContent);
        }

        function mostrarOpcionesExportar() {
            alert('Para exportar, usa la función de imprimir y selecciona "Guardar como PDF"');
            window.print();
        }

        function showReport(title, content) {
            document.getElementById('reportTitle').textContent = title;
            document.getElementById('reportContent').innerHTML = content;
            document.getElementById('reportViewer').classList.remove('hidden');
        }

        function closeReportViewer() {
            document.getElementById('reportViewer').classList.add('hidden');
        }

        function printReport() {
            window.print();
        }

        // Funciones de visualización
        function viewSale(saleId) {
            const sale = sales.find(s => s.id === saleId);
            if (!sale) return;
            
            let detailsHTML = '<h4 class="font-semibold mb-2">Productos:</h4><ul class="list-disc pl-5">';
            for (const line of sale.lines) {
                const product = products.find(p => p.id === line.productId);
                detailsHTML += `<li>${product ? product.name : 'Producto eliminado'} - Cantidad: ${line.quantity} - Precio: ${formatCurrency(line.price)} - Subtotal: ${formatCurrency(line.subtotal)}</li>`;
            }
            detailsHTML += '</ul>';
            
            const content = `
                <div class="space-y-4">
                    <div class="grid grid-cols-2 gap-4">
                        <div>
                            <p class="text-sm text-gray-600">Cliente:</p>
                            <p class="font-semibold">${sale.customerName}</p>
                        </div>
                        <div>
                            <p class="text-sm text-gray-600">Tipo:</p>
                            <p class="font-semibold">${sale.customerType}</p>
                        </div>
                        <div>
                            <p class="text-sm text-gray-600">Fecha:</p>
                            <p class="font-semibold">${formatDate(sale.date)}</p>
                        </div>
                        <div>
                            <p class="text-sm text-gray-600">Total:</p>
                            <p class="font-semibold text-xl">${formatCurrency(sale.total)}</p>
                        </div>
                    </div>
                    <div>${detailsHTML}</div>
                </div>
            `;
            
            showReport('Detalle de Venta', content);
        }

        function printSale(saleId) {
            viewSale(saleId);
            setTimeout(() => window.print(), 500);
        }

        // Funciones base de datos
        async function loadInitialData() {
            if (isDemoMode) {
                loadDemoData();
                return;
            }
            
            showLoader();
            try {
                await initializeDefaultAccounts();
                await Promise.all([
                    loadProducts(),
                    loadSales(),
                    loadPurchases(),
                    loadAccounts(),
                    loadPolizas()
                ]);
                updateDashboard();
            } catch (error) {
                console.error('Error al cargar datos:', error);
                showError('Error al cargar datos. Intenta sincronizar manualmente.');
            } finally {
                hideLoader();
            }
        }

        async function initializeDefaultAccounts() {
            if (!isFirebaseConnected || isDemoMode) return;
            
            const defaultAccounts = [
                { clave: '1101', nombre: 'Caja', tipo: 'Activo', naturaleza: 'Deudora' },
                { clave: '1102', nombre: 'Bancos', tipo: 'Activo', naturaleza: 'Deudora' },
                { clave: '1104', nombre: 'Inventarios', tipo: 'Activo', naturaleza: 'Deudora' },
                { clave: '2101', nombre: 'Proveedores', tipo: 'Pasivo', naturaleza: 'Acreedora' },
                { clave: '3001', nombre: 'Capital Social', tipo: 'Capital', naturaleza: 'Acreedora' },
                { clave: '4001', nombre: 'Ventas', tipo: 'Ingreso', naturaleza: 'Acreedora' },
                { clave: '5001', nombre: 'Costo de Ventas', tipo: 'Gasto', naturaleza: 'Deudora' }
            ];
            
            for (const account of defaultAccounts) {
                try {
                    const exists = await db.collection('accounts')
                        .where('clave', '==', account.clave)
                        .get();
                    
                    if (exists.empty) {
                        await db.collection('accounts').add({
                            ...account,
                            saldo: 0,
                            createdAt: firebase.firestore.FieldValue.serverTimestamp()
                        });
                    }
                } catch (error) {
                    console.error('Error creando cuenta:', error);
                }
            }
        }

        async function loadProducts() {
            if (!isFirebaseConnected || isDemoMode) return;
            
            try {
                const snapshot = await db.collection('products')
                    .orderBy('createdAt', 'desc')
                    .get();
                
                products = [];
                snapshot.forEach(doc => {
                    products.push({ id: doc.id, ...doc.data() });
                });
                
                loadProductsList();
            } catch (error) {
                console.error('Error cargando productos:', error);
            }
        }

        async function loadSales() {
            if (!isFirebaseConnected || isDemoMode) return;
            
            try {
                const snapshot = await db.collection('sales')
                    .orderBy('createdAt', 'desc')
                    .limit(50)
                    .get();
                
                sales = [];
                snapshot.forEach(doc => {
                    sales.push({ id: doc.id, ...doc.data() });
                });
                
                loadSalesList();
            } catch (error) {
                console.error('Error cargando ventas:', error);
            }
        }

        async function loadPurchases() {
            if (!isFirebaseConnected || isDemoMode) return;
            
            try {
                const snapshot = await db.collection('purchases')
                    .orderBy('createdAt', 'desc')
                    .limit(50)
                    .get();
                
                purchases = [];
                const tbody = document.getElementById('purchasesList');
                tbody.innerHTML = '';
                
                snapshot.forEach(doc => {
                    const purchase = { id: doc.id, ...doc.data() };
                    purchases.push(purchase);
                    
                    tbody.innerHTML += `
                        <tr>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${formatDate(purchase.date)}</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${purchase.supplierName}</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${purchase.invoiceNumber || 'S/N'}</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${formatCurrency(purchase.total)}</td>
                            <td class="px-6 py-4 whitespace-nowrap">
                                <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                                    ${purchase.status}
                                </span>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                <button onclick="viewPurchase('${doc.id}')" class="text-indigo-600 hover:text-indigo-900 mr-2">
                                    <i class="fas fa-eye"></i>
                                </button>
                            </td>
                        </tr>
                    `;
                });
            } catch (error) {
                console.error('Error cargando compras:', error);
            }
        }

        async function loadAccounts() {
            if (!isFirebaseConnected || isDemoMode) return;
            
            try {
                const snapshot = await db.collection('accounts')
                    .orderBy('clave')
                    .get();
                
                accounts = [];
                snapshot.forEach(doc => {
                    accounts.push({ id: doc.id, ...doc.data() });
                });
                
                loadAccountsList();
            } catch (error) {
                console.error('Error cargando cuentas:', error);
            }
        }

        async function loadPolizas() {
            if (!isFirebaseConnected || isDemoMode) return;
            
            try {
                const snapshot = await db.collection('polizas')
                    .orderBy('createdAt', 'desc')
                    .limit(50)
                    .get();
                
                polizas = [];
                const tbody = document.getElementById('polizasList');
                tbody.innerHTML = '';
                
                snapshot.forEach(doc => {
                    const poliza = { id: doc.id, ...doc.data() };
                    polizas.push(poliza);
                    
                    tbody.innerHTML += `
                        <tr>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${formatDate(poliza.fecha)}</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full 
                                    ${poliza.tipo === 'Ingreso' ? 'bg-green-100 text-green-800' : 
                                      poliza.tipo === 'Egreso' ? 'bg-red-100 text-red-800' : 
                                      poliza.tipo === 'Diario' ? 'bg-blue-100 text-blue-800' : 
                                      'bg-yellow-100 text-yellow-800'}">
                                    ${poliza.tipo}
                                </span>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${poliza.numero}</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${poliza.concepto}</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${formatCurrency(poliza.totalDebe)}</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                <button onclick="viewPoliza('${doc.id}')" class="text-indigo-600 hover:text-indigo-900 mr-2">
                                    <i class="fas fa-eye"></i>
                                </button>
                            </td>
                        </tr>
                    `;
                });
            } catch (error) {
                console.error('Error cargando pólizas:', error);
            }
        }

        async function syncData() {
            if (isDemoMode) {
                alert('En modo demo no se puede sincronizar con la base de datos');
                return;
            }
            
            if (!isFirebaseConnected) {
                showError('No hay conexión con Firebase. Intenta recargar la página.');
                return;
            }
            
            await loadInitialData();
            alert('Datos sincronizados exitosamente');
        }

        // Funciones CRUD
        async function editProduct(productId) {
            const product = products.find(p => p.id === productId);
            if (!product) return;
            
            document.getElementById('productId').value = productId;
            document.getElementById('productName').value = product.name;
            document.getElementById('productCategory').value = product.category;
            document.getElementById('productSize').value = product.size;
            document.getElementById('productFlavor').value = product.flavor;
            document.getElementById('wholesalePrice').value = product.wholesalePrice;
            document.getElementById('retailPrice').value = product.retailPrice;
            document.getElementById('initialStock').value = product.stock;
            document.getElementById('barcode').value = product.barcode || '';
            
            showProductForm();
        }

        async function deleteProduct(productId) {
            if (!confirm('¿Estás seguro de eliminar este producto?')) return;
            
            if (isDemoMode) {
                products = products.filter(p => p.id !== productId);
                loadProductsList();
                updateDashboard();
                alert('Producto eliminado (modo demo)');
                return;
            }
            
            if (!isFirebaseConnected) {
                showError('No hay conexión con Firebase');
                return;
            }
            
            showLoader();
            try {
                await db.collection('products').doc(productId).delete();
                alert('Producto eliminado exitosamente');
                await loadProducts();
                updateDashboard();
            } catch (error) {
                showError('Error al eliminar producto: ' + error.message);
            } finally {
                hideLoader();
            }
        }

        // Event Listeners para formularios
        document.getElementById('productFormElement').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const productId = document.getElementById('productId').value;
            const product = {
                name: document.getElementById('productName').value,
                category: document.getElementById('productCategory').value,
                size: document.getElementById('productSize').value,
                flavor: document.getElementById('productFlavor').value,
                wholesalePrice: parseFloat(document.getElementById('wholesalePrice').value),
                retailPrice: parseFloat(document.getElementById('retailPrice').value),
                stock: parseInt(document.getElementById('initialStock').value),
                barcode: document.getElementById('barcode').value
            };
            
            if (isDemoMode) {
                if (productId) {
                    const index = products.findIndex(p => p.id === productId);
                    products[index] = { ...products[index], ...product };
                } else {
                    product.id = Date.now().toString();
                    products.push(product);
                }
                hideProductForm();
                loadProductsList();
                updateDashboard();
                alert('Producto guardado (modo demo)');
                return;
            }
            
            if (!isFirebaseConnected) {
                showError('No hay conexión con Firebase');
                return;
            }
            
            showLoader();
            try {
                if (productId) {
                    await db.collection('products').doc(productId).update(product);
                    alert('Producto actualizado exitosamente');
                } else {
                    product.createdAt = firebase.firestore.FieldValue.serverTimestamp();
                    await db.collection('products').add(product);
                    alert('Producto guardado exitosamente');
                }
                hideProductForm();
                await loadProducts();
                updateDashboard();
            } catch (error) {
                showError('Error al guardar producto: ' + error.message);
            } finally {
                hideLoader();
            }
        });

        document.getElementById('saleFormElement').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const lines = [];
            document.querySelectorAll('.sale-line').forEach(line => {
                const productId = line.querySelector('.product-select').value;
                const quantity = parseInt(line.querySelector('.quantity-input').value);
                const price = parseFloat(line.querySelector('.price-input').value);
                const subtotal = parseFloat(line.querySelector('.subtotal-input').value);
                
                if (productId && quantity > 0) {
                    lines.push({ productId, quantity, price, subtotal });
                }
            });
            
            if (lines.length === 0) {
                alert('Agrega al menos un producto a la venta');
                return;
            }
            
            const sale = {
                customerName: document.getElementById('customerName').value,
                customerType: document.getElementById('customerType').value,
                date: document.getElementById('saleDate').value,
                lines: lines,
                total: parseFloat(document.getElementById('saleTotal').textContent),
                status: 'pagada'
            };
            
            if (isDemoMode) {
                sale.id = Date.now().toString();
                sales.unshift(sale);
                
                // Actualizar stock en modo demo
                lines.forEach(line => {
                    const product = products.find(p => p.id === line.productId);
                    if (product) {
                        product.stock -= line.quantity;
                    }
                });
                
                hideSaleForm();
                loadSalesList();
                loadProductsList();
                updateDashboard();
                alert('Venta registrada (modo demo)');
                return;
            }
            
            if (!isFirebaseConnected) {
                showError('No hay conexión con Firebase');
                return;
            }
            
            showLoader();
            try {
                sale.createdAt = firebase.firestore.FieldValue.serverTimestamp();
                const saleRef = await db.collection('sales').add(sale);
                
                // Actualizar inventario
                const batch = db.batch();
                for (const line of lines) {
                    const productRef = db.collection('products').doc(line.productId);
                    batch.update(productRef, {
                        stock: firebase.firestore.FieldValue.increment(-line.quantity)
                    });
                }
                await batch.commit();
                
                alert('Venta registrada exitosamente');
                hideSaleForm();
                await Promise.all([loadSales(), loadProducts()]);
                updateDashboard();
            } catch (error) {
                showError('Error al registrar venta: ' + error.message);
            } finally {
                hideLoader();
            }
        });

        document.getElementById('purchaseFormElement').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const lines = [];
            document.querySelectorAll('.purchase-line').forEach(line => {
                const description = line.querySelector('.item-description').value;
                const quantity = parseInt(line.querySelector('.quantity-input').value);
                const price = parseFloat(line.querySelector('.price-input').value);
                const subtotal = parseFloat(line.querySelector('.subtotal-input').value);
                
                if (description && quantity > 0) {
                    lines.push({ description, quantity, price, subtotal });
                }
            });
            
            if (lines.length === 0) {
                alert('Agrega al menos un ítem a la compra');
                return;
            }
            
            const purchase = {
                supplierName: document.getElementById('supplierName').value,
                invoiceNumber: document.getElementById('invoiceNumber').value,
                date: document.getElementById('purchaseDate').value,
                lines: lines,
                total: parseFloat(document.getElementById('purchaseTotal').textContent),
                status: 'pagada'
            };
            
            if (isDemoMode) {
                purchase.id = Date.now().toString();
                purchases.unshift(purchase);
                hidePurchaseForm();
                alert('Compra registrada (modo demo)');
                return;
            }
            
            if (!isFirebaseConnected) {
                showError('No hay conexión con Firebase');
                return;
            }
            
            showLoader();
            try {
                purchase.createdAt = firebase.firestore.FieldValue.serverTimestamp();
                await db.collection('purchases').add(purchase);
                alert('Compra registrada exitosamente');
                hidePurchaseForm();
                await loadPurchases();
            } catch (error) {
                showError('Error al registrar compra: ' + error.message);
            } finally {
                hideLoader();
            }
        });

        document.getElementById('polizaFormElement').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const totalDebe = parseFloat(document.getElementById('totalDebe').textContent);
            const totalHaber = parseFloat(document.getElementById('totalHaber').textContent);
            
            if (Math.abs(totalDebe - totalHaber) > 0.01) {
                alert('La póliza no está balanceada. El total de cargos debe ser igual al total de abonos.');
                return;
            }
            
            const movimientos = [];
            document.querySelectorAll('#polizaMovimientos tr').forEach(row => {
                const cuenta = row.querySelector('.cuenta-select').value;
                const descripcion = row.querySelector('.descripcion-input').value;
                const debe = parseFloat(row.querySelector('.debe-input').value) || 0;
                const haber = parseFloat(row.querySelector('.haber-input').value) || 0;
                
                if (cuenta && (debe > 0 || haber > 0)) {
                    movimientos.push({ cuenta, descripcion, debe, haber });
                }
            });
            
            if (movimientos.length < 2) {
                alert('La póliza debe tener al menos 2 movimientos');
                return;
            }
            
            const poliza = {
                tipo: document.getElementById('polizaTipo').value,
                fecha: document.getElementById('polizaFecha').value,
                numero: document.getElementById('polizaNumero').value,
                concepto: document.getElementById('polizaConcepto').value,
                referencia: document.getElementById('polizaReferencia').value,
                movimientos: movimientos,
                totalDebe: totalDebe,
                totalHaber: totalHaber,
                estatus: 'Activa'
            };
            
            if (isDemoMode) {
                poliza.id = Date.now().toString();
                polizas.unshift(poliza);
                hidePolizaForm();
                alert('Póliza guardada (modo demo)');
                return;
            }
            
            if (!isFirebaseConnected) {
                showError('No hay conexión con Firebase');
                return;
            }
            
            showLoader();
            try {
                poliza.createdAt = firebase.firestore.FieldValue.serverTimestamp();
                await db.collection('polizas').add(poliza);
                
                // Actualizar saldos de cuentas
                const batch = db.batch();
                for (const mov of movimientos) {
                    const accountSnapshot = await db.collection('accounts')
                        .where('clave', '==', mov.cuenta)
                        .limit(1)
                        .get();
                    
                    if (!accountSnapshot.empty) {
                        const accountDoc = accountSnapshot.docs[0];
                        const account = accountDoc.data();
                        let nuevoSaldo = account.saldo || 0;
                        
                        if (account.naturaleza === 'Deudora') {
                            nuevoSaldo += mov.debe - mov.haber;
                        } else {
                            nuevoSaldo += mov.haber - mov.debe;
                        }
                        
                        batch.update(accountDoc.ref, { saldo: nuevoSaldo });
                    }
                }
                await batch.commit();
                
                alert('Póliza guardada exitosamente');
                hidePolizaForm();
                await Promise.all([loadPolizas(), loadAccounts()]);
            } catch (error) {
                showError('Error al guardar póliza: ' + error.message);
            } finally {
                hideLoader();
            }
        });

        document.getElementById('cuentaFormElement').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const cuenta = {
                clave: document.getElementById('cuentaClave').value,
                nombre: document.getElementById('cuentaNombre').value,
                tipo: document.getElementById('cuentaTipo').value,
                naturaleza: document.getElementById('cuentaNaturaleza').value,
                saldo: 0
            };
            
            if (isDemoMode) {
                cuenta.id = Date.now().toString();
                accounts.push(cuenta);
                hideCuentaForm();
                loadAccountsList();
                alert('Cuenta creada (modo demo)');
                return;
            }
            
            if (!isFirebaseConnected) {
                showError('No hay conexión con Firebase');
                return;
            }
            
            showLoader();
            try {
                cuenta.createdAt = firebase.firestore.FieldValue.serverTimestamp();
                await db.collection('accounts').add(cuenta);
                alert('Cuenta creada exitosamente');
                hideCuentaForm();
                await loadAccounts();
            } catch (error) {
                showError('Error al crear cuenta: ' + error.message);
            } finally {
                hideLoader();
            }
        });

        document.getElementById('empresaForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            if (isDemoMode) {
                alert('Información guardada (modo demo)');
                return;
            }
            
            alert('Información guardada');
        });

        document.getElementById('fiscalForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            if (isDemoMode) {
                alert('Configuración guardada (modo demo)');
                return;
            }
            
            alert('Configuración guardada');
        });

        // Funciones de configuración
        function crearRespaldo() {
            if (isDemoMode) {
                alert('Los respaldos no están disponibles en modo demo');
                return;
            }
            
            if (!isFirebaseConnected) {
                showError('No hay conexión con Firebase');
                return;
            }
            
            alert('Respaldo creado automáticamente en Firebase');
        }

        function verRespaldos() {
            if (isDemoMode) {
                alert('Los respaldos no están disponibles en modo demo');
                return;
            }
            
            alert('Los respaldos se realizan automáticamente cada 24 horas en Firebase');
        }

        function viewPurchase(purchaseId) {
            const purchase = purchases.find(p => p.id === purchaseId);
            if (!purchase) return;
            
            let detailsHTML = '<h4 class="font-semibold mb-2">Detalle de compra:</h4><ul class="list-disc pl-5">';
            purchase.lines.forEach(line => {
                detailsHTML += `<li>${line.description} - Cantidad: ${line.quantity} - Precio: ${formatCurrency(line.price)} - Subtotal: ${formatCurrency(line.subtotal)}</li>`;
            });
            detailsHTML += '</ul>';
            
            const content = `
                <div class="space-y-4">
                    <div class="grid grid-cols-2 gap-4">
                        <div>
                            <p class="text-sm text-gray-600">Proveedor:</p>
                            <p class="font-semibold">${purchase.supplierName}</p>
                        </div>
                        <div>
                            <p class="text-sm text-gray-600">Factura:</p>
                            <p class="font-semibold">${purchase.invoiceNumber || 'Sin número'}</p>
                        </div>
                        <div>
                            <p class="text-sm text-gray-600">Fecha:</p>
                            <p class="font-semibold">${formatDate(purchase.date)}</p>
                        </div>
                        <div>
                            <p class="text-sm text-gray-600">Total:</p>
                            <p class="font-semibold text-xl">${formatCurrency(purchase.total)}</p>
                        </div>
                    </div>
                    <div>${detailsHTML}</div>
                </div>
            `;
            
            showReport('Detalle de Compra', content);
        }

        function viewPoliza(polizaId) {
            const poliza = polizas.find(p => p.id === polizaId);
            if (!poliza) return;
            
            let movimientosHTML = `
                <table class="min-w-full">
                    <thead class="bg-gray-50">
                        <tr>
                            <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Cuenta</th>
                            <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Descripción</th>
                            <th class="px-4 py-2 text-right text-xs font-medium text-gray-500 uppercase">Debe</th>
                            <th class="px-4 py-2 text-right text-xs font-medium text-gray-500 uppercase">Haber</th>
                        </tr>
                    </thead>
                    <tbody class="divide-y divide-gray-200">
            `;
            
            poliza.movimientos.forEach(mov => {
                movimientosHTML += `
                    <tr>
                        <td class="px-4 py-2 text-sm">${mov.cuenta}</td>
                        <td class="px-4 py-2 text-sm">${mov.descripcion}</td>
                        <td class="px-4 py-2 text-sm text-right">${mov.debe > 0 ? formatCurrency(mov.debe) : ''}</td>
                        <td class="px-4 py-2 text-sm text-right">${mov.haber > 0 ? formatCurrency(mov.haber) : ''}</td>
                    </tr>
                `;
            });
            
            movimientosHTML += `
                    </tbody>
                    <tfoot class="bg-gray-50 font-semibold">
                        <tr>
                            <td colspan="2" class="px-4 py-2 text-right">Totales:</td>
                            <td class="px-4 py-2 text-right">${formatCurrency(poliza.totalDebe)}</td>
                            <td class="px-4 py-2 text-right">${formatCurrency(poliza.totalHaber)}</td>
                        </tr>
                    </tfoot>
                </table>
            `;
            
            const content = `
                <div class="space-y-4">
                    <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
                        <div>
                            <p class="text-sm text-gray-600">Tipo:</p>
                            <p class="font-semibold">${poliza.tipo}</p>
                        </div>
                        <div>
                            <p class="text-sm text-gray-600">Número:</p>
                            <p class="font-semibold">${poliza.numero}</p>
                        </div>
                        <div>
                            <p class="text-sm text-gray-600">Fecha:</p>
                            <p class="font-semibold">${formatDate(poliza.fecha)}</p>
                        </div>
                        <div>
                            <p class="text-sm text-gray-600">Referencia:</p>
                            <p class="font-semibold">${poliza.referencia || 'N/A'}</p>
                        </div>
                    </div>
                    <div>
                        <p class="text-sm text-gray-600">Concepto:</p>
                        <p class="font-semibold">${poliza.concepto}</p>
                    </div>
                    <div>${movimientosHTML}</div>
                </div>
            `;
            
            showReport('Póliza Contable', content);
        }

        // Eventos de conexión
        window.addEventListener('online', () => {
            document.body.classList.remove('offline');
            if (!isDemoMode) {
                syncData();
            }
        });

        window.addEventListener('offline', () => {
            document.body.classList.add('offline');
        });

        // Establecer fechas por defecto
        function setDefaultDates() {
            const dateInputs = document.querySelectorAll('input[type="date"]');
            const today = new Date().toISOString().split('T')[0];
            dateInputs.forEach(input => {
                if (!input.value) input.value = today;
            });
        }

        // Inicialización al cargar
        document.addEventListener('DOMContentLoaded', () => {
            setDefaultDates();
            
            // Inicializar Firebase
            initializeFirebase();
        });
    </script>
</body>
</html>
